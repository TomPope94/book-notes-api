service: book-notes-app-api

package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  stage: prod
  region: eu-west-1
  environment:
    booksTableName: books
    usersTableName: users
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:eu-west-1:*:*'

functions:
  #############################################
  ####      User Management Service        ####
  #############################################
  # create:
  #   handler: services/users/create.main
  #   events:
  #     - http:
  #         path: users
  #         method: post
  #         cors: true
  #         authorizer: aws_iam

  #############################################
  ####     Book Management Service         ####
  #############################################
  createBook:
    handler: services/books/createBook.main
    events:
      - http:
          path: books
          method: post
          cors: true
          authorizer: aws_iam
  getBook:
    handler: services/books/getBook.main
    events:
      - http:
          path: books/{id}
          method: get
          cors: true
          authorizer: aws_iam
  listBooks:
    handler: services/books/listBooks.main
    events:
      - http:
          path: books
          method: get
          cors: true
          authorizer: aws_iam
  updateBook:
    handler: services/books/updateBook.main
    events:
      - http:
          path: books/{id}
          method: put
          cors: true
          authorizer: aws_iam
  deleteBook:
    handler: services/books/deleteBook.main
    events:
      - http:
          path: books/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  bookSearch:
    handler: services/books/searchBook.main
    environment:
      googleBooksKey: AIzaSyB404R9Yom8qkJOrFG0xLpgd9Smh9VLvMA
    events:
      - http:
          path: books/search
          method: get
          cors: true
          authorizer: aws_iam
  #############################################
  ####          Notes Service              ####
  #############################################
  updateNotes:
    handler: services/notes/updateNotes.main
    events:
      - http:
          path: books/{id}/notes
          method: put
          cors: true
          authorizer: aws_iam
  deleteNotes:
    handler: services/notes/deleteNotes.main
    events:
      - http:
          path: books/{id}/notes
          method: delete
          cors: true
          authorizer: aws_iam
  #############################################
  ####         Review Service              ####
  #############################################
  updateReview:
    handler: services/review/updateReview.main
    events:
      - http:
          path: books/{id}/review
          method: put
          cors: true
          authorizer: aws_iam
  deleteReview:
    handler: services/review/deleteReview.main
    events:
      - http:
          path: books/{id}/review
          method: delete
          cors: true
          authorizer: aws_iam
  #############################################
  ####      Book Tracking Service          ####
  #############################################
  updateProgression:
    handler: services/progression/updateProgression.main
    events:
      - http:
          path: books/{id}/progress
          method: put
          cors: true
          authorizer: aws_iam
  deleteProgression:
    handler: services/progression/deleteProgression.main
    events:
      - http:
          path: books/{id}/progress
          method: delete
          cors: true
          authorizer: aws_iam
  #############################################
  ####          Payments Service           ####
  #############################################

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
